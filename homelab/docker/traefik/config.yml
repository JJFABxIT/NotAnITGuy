http:
 #region routers
  routers:
    jellyfin:
      entryPoints:
        - "https"
      rule: "Host(`jellyfin.example.com`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: {}
      service: jellyfin

    gallilei:
      entryPoints:
        - "https"
      rule: "Host(`gallilei.example.com`)"
      middlewares:
        - default-headers
#        - secure-headers
        - https-redirectscheme
        - truenas-webSockets
      tls: {}
      service: gallilei

    proxmox:
      entryPoints:
        - "https"
      rule: "Host(`prxmx.example.com`)"
      middlewares:
        - default-headers
        - https-redirectscheme
        - authentik
      tls: {}
      service: proxmox

    pihole:
      entryPoints:
        - "https"
      rule: "Host(`pihle.example.com`)"
      middlewares:
        - authentik
        - redirectregex-pihole
        - default-headers
        - addprefix-pihole
        - https-redirectscheme
      tls: {}
      service: pihole

    qbit:
      entryPoints:
        - "https"
      rule: "Host(`dwnld.example.com`)"
      middlewares:
        - authentik
        - https-redirectscheme
        - default-headers
      tls: {}
      service: qbit

    jellyseer:
      entryPoints:
        - "https"
      rule: "Host(`reqsj.example.com`)"
      middlewares:
        - authentik
        - https-redirectscheme
        - default-headers
      tls: {}
      service: jellyseer

    prowlarr:
      entryPoints:
        - "https"
      rule: "Host(`prwlr.example.com`)"
      middlewares:
        - authentik
        - https-redirectscheme
        - default-headers
      tls: {}
      service: prowlarr

    sonarr:
      entryPoints:
        - "https"
      rule: "Host(`snarr.example.com`)"
      middlewares:
        - authentik
        - https-redirectscheme
        - default-headers
      tls: {}
      service: sonarr

    radarr:
      entryPoints:
        - "https"
      rule: "Host(`rdarr.example.com`)"
      middlewares:
        - authentik
        - https-redirectscheme
        - default-headers
      tls: {}
      service: radarr
#endregion
#region services
  services:
    jellyfin:
      loadBalancer:
        servers:
          - url: "http://{IP:PORT}"

    gallilei:
      loadBalancer:
        servers:
          - url: "http://{IP:PORT}"
        passHostHeader: true

    proxmox:
      loadBalancer:
        servers:
          - url: "https://{IP:PORT}"
        passHostHeader: true

    pihole:
      loadBalancer:
        servers:
          - url: "http://{IP:PORT}"
        passHostHeader: true

    qbit:
      loadBalancer:
        servers:
          - url: "http://{IP:PORT}"
        passHostHeader: True

    jellyseer:
      loadBalancer:
        servers:
          - url: "http://{IP:PORT}"
        passHostHeader: True

    prowlarr:
      loadBalancer:
        servers:
          - url: "http://{IP:PORT}"
        passHostHeader: True

    sonarr:
      loadBalancer:
        servers:
          - url: "http://{IP:PORT}"
        passHostHeader: True

    radarr:
      loadBalancer:
        servers:
          - url: "http://{IP:PORT}"
        passHostHeader: True
#endregion
  middlewares:
    authentik:
      forwardAuth:
        address: "http://authentik-srver:9000/outpost.goauthentik.io/auth/traefik"
        trustForwardHeader: true
        authResponseHeaders:
          - X-authentik-username
          - X-authentik-groups
          - X-authentik-email
          - X-authentik-name
          - X-authentik-uid
          - X-authentik-jwt
          - X-authentik-meta-jwts
          - X-authentik-meta-outpost
          - X-authentik-meta-provider
          - X-authentik-meta-app
          - X-authentik-meta-version

    addprefix-pihole:
      addPrefix:
        prefix: "/admin"

    https-redirectscheme:
      redirectScheme:
        scheme: https
        permanent: true

    redirectregex-pihole:
      redirectRegex:
        regex: "/admin/(.*)"
        replacement: /

    default-headers:
      headers:
        frameDeny: true
        browserXssFilter: true
        contentTypeNosniff: true
        forceSTSHeader: true
        stsIncludeSubdomains: true
        stsPreload: true
        stsSeconds: 15552000
        customFrameOptionsValue: SAMEORIGIN
        customRequestHeaders:
          X-Forwarded-Proto: https

    idrac:
      headers:
        frameDeny: true
        browserXssFilter: true
        forceSTSHeader: true
        stsIncludeSubdomains: true
        stsSeconds: 15552000
        customFrameOptionsValue: SAMEORIGIN
        customRequestHeaders:
          X-Forwarded-Proto: https

    default-whitelist:
      ipAllowList:
        sourceRange:
        - "10.0.0.0/8"
        - "192.168.0.0/16"
        - "172.16.0.0/12"

    secured:
      chain:
        middlewares:
        - default-whitelist
        - default-headers

    secureHeaders:
      headers:
        customRequestHeaders:
          "X-Forwarded-Proto": "https"

    truenas-webSockets:
      headers:
        customRequestHeaders:
          Connection: "Upgrade"
          Upgrade: "websocket"